version: '3.1'
services:

# ------------------------------discovery-service------------------------------------------------
  discovery-service:
    image: discovery-service
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"

# ------------------------------api-gateway------------------------------------------------
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      keycloak:
        condition: service_started

# ------------------------------product-service------------------------------------------------
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
        - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
        - "27017:27017"
  product-service:
    image: product-service
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
        mongo:
          condition: service_started

# ------------------------------order-service------------------------------------------------
#  Todo : kafka connection
  mysql:
    image: mysql
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_service_db
      MYSQL_USER: order_service_user
      MYSQL_PASSWORD: order_service_user
    ports:
        - "3306:3306"
  order-service:
    image: order-service
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    depends_on:
        mysql:
          condition: service_started
        kafka:
          condition: service_started

# ------------------------------inventory-service------------------------------------------------
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: inventory_service_db
      POSTGRES_USER: inventory_service_user
      POSTGRES_PASSWORD: inventory_service_user
    ports:
        - "5432:5432"

  inventory-service:
    container_name: inventory-service
    image: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    depends_on:
        postgres:
          condition: service_started

# ------------------------------notification-service------------------------------------------------
#  Todo : Fix kafka connection
  notification-service:
    image: notification-service
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    depends_on:
        kafka:
          condition: service_started

  # ------------------------------keycloak------------------------------------------------
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    ports:
      - "8281:8080"
    volumes:
      - ./keycloak/realm-export:/opt/keycloak/data/import
    depends_on:
      keycloak-mysql:
        condition: service_started
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm-export.json

    command: start-dev --import-realm


# ------------------------------kafka------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092


